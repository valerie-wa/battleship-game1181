clc
clear

%Print the game instructions in the command window

fprintf('Welcome to Battleship!\n')
fprintf('Here is some important info about our game:\n')
fprintf('The left side is the computer bot board, this is where the player\n (you) will attempt to sink ships by clicking.\n')

fprintf('The right side is the your(player) board. Click here when\n prompted to place your ships.\n')

fprintf('There are 5 different battleships of length 5, 4, 3, 3, and 2\n (you will place in this order).\nMake sure to place each ship so it can fit on the board\n')
fprintf('You will first be prompted for horizontal or vertical (you may\n not place ships diagonally). \n')

fprintf('Do not place ships on black border or outside or board.\n')

fprintf('Sinking ships: You cannot click the same more than once.\n')
fprintf('The board will be displayed with a white circle when you miss and\n a red circle when you hit the opponents ship.\n')

fprintf('The game will end when either you or the computer has hit every\n space containing a ship.\n')

%Load in sprite pack
my_scene = simpleGameEngine('Battleship.png',84,84);
blank_sprite = 1;
water_sprite = 2;
left_ship_sprite = 3;
horiz_ship_sprite = 4;
right_ship_sprite = 5;
top_ship_sprite = 6;
vert_ship_sprite = 7;
bot_ship_sprite = 8;
hit_sprite = 9;
miss_sprite = 10;


%Display an empty board (water)
board_display = water_sprite * ones(10,21); %empty board w water display
board_display(:,11) = blank_sprite; %divider
drawScene(my_scene, board_display)


%Setup the opponents board randomly
cpu_board = Setup();

%displays boats on the board for the player/cpu
%Decipher whether the ship is vertical (The last index minus the first
%index should equal the length of the ship - 1


% user setup
%%Asking user for input to setup board
user_board = zeros(10, 22);
%Setup the users board based on input
fprintf('First: ')
for ship_id = 1:5
    ship_length = [5,4,3,3,2];
    user_board = userSetup(my_scene, ship_id, ship_length, user_board);



%Naming the boats for user
Usercarrier = find(user_board==1);
Userbship = find(user_board==2);
Usersubmarine = find(user_board==3);
Usercruiser = find(user_board==4);
Userptboat = find(user_board==5);

%displays boats on the board for the player/cpu
    %Decipher whether the ship is vertical (The last index minus the first
    %index should equal the length of the ship - 1
    if ship_id == 1
        if Usercarrier(5)-Usercarrier(1)==4
            %Vertical ship uses the vertical sprites
            board_display(Usercarrier) = [top_ship_sprite; vert_ship_sprite; vert_ship_sprite; vert_ship_sprite; bot_ship_sprite];   
        else
            %Horizontal ship uses the horizontal sprites
            Usercarrier = Usercarrier';
            board_display(Usercarrier) = [left_ship_sprite, horiz_ship_sprite, horiz_ship_sprite, horiz_ship_sprite, right_ship_sprite];
        end
    elseif ship_id ==2
        if Userbship(4)-Userbship(1)==3
            board_display(Userbship) = [top_ship_sprite; vert_ship_sprite; vert_ship_sprite; bot_ship_sprite];
        else
            Userbship = Userbship';
            board_display(Userbship) = [left_ship_sprite, horiz_ship_sprite, horiz_ship_sprite, right_ship_sprite];
        end
    
    elseif ship_id == 3
        if Usersubmarine(3)-Usersubmarine(1)==2
            board_display(Usersubmarine) = [top_ship_sprite; vert_ship_sprite; bot_ship_sprite];
        else
            Usersubmarine = Usersubmarine';
            board_display(Usersubmarine) = [left_ship_sprite, horiz_ship_sprite, right_ship_sprite];
        end
    elseif ship_id ==4 
        if Usercruiser(3)-Usercruiser(1)==2
            board_display(Usercruiser) = [top_ship_sprite; vert_ship_sprite; bot_ship_sprite];
        else
            Usercruiser = Usercruiser';
            board_display(Usercruiser) = [left_ship_sprite, horiz_ship_sprite, right_ship_sprite];
        end
    else
        if Userptboat(2)-Userptboat(1)==1
            board_display(Userptboat) = [top_ship_sprite; bot_ship_sprite];
        else
            Userptboat = Userptboat';
            board_display(Userptboat) = [left_ship_sprite, right_ship_sprite];
        end
    end

drawScene(my_scene, board_display)

end

%% 

%_______________________________
% Set up hits and misses layer
%j copy pasted this
fprintf("Start sinking your opponent's ships (click on left board)!\n")
hitmiss_display = blank_sprite * ones(10,21);

my_points = 0;
CPU_points = 0;
hit = false;

guessedPlaces = zeros(10, 22, 'logical'); %%array for if peg already placed
lasthitRow = 0; %keeping track of where the comp last hit for algorithm
lasthitCol = 0;
compRow = randi([1 10], 1, 1);
compCol = randi([12 21], 1, 1);

for turn = 1:200 %turn is the index
    %increase the index after a guess
    % if the value on the cpu's board equals zero, the guess is a miss
    if mod(turn, 2) == 1 %odd (user guess)
        %Get a user input in the form of a row vs column click
        [guessRow,guessCol] = getMouseInput(my_scene);

        fprintf("Your Turn! Click an open space on the computer's board (left side).\n")
        if cpu_board(guessRow,guessCol) == 0
           fprintf('You miss!\n') %Tell the user they missed
           hitmiss_display(guessRow,guessCol) = miss_sprite; 
           drawScene(my_scene, board_display, hitmiss_display) %Display a miss marker on the left side where the user guessed
        else
           fprintf('You hit!\n') %Tell the user they hit
           my_points = my_points+1; %Add a point to the win condition
           hitmiss_display(guessRow,guessCol) = hit_sprite; 
           drawScene(my_scene, board_display, hitmiss_display) %Display a hit marker on the left side
        end
    elseif mod(turn, 2) == 0 %even (computer's guess) (BOT!!!)
            if sum([lasthitRow,lasthitCol],"all") == 0
                compRow = randi([1 10], 1, 1);
                compCol = randi([12 21], 1, 1); %Generate a random guess on the user's board
                while guessedPlaces(compRow, compCol) == true
                    compRow = randi([1 10], 1, 1);
                    compCol = randi([12 21], 1, 1);
                end
            end
    
            if user_board(compRow,compCol) == 0
                fprintf('Computer miss!\n') %Tell the user that the computer missed
                hitmiss_display(compRow,compCol) = miss_sprite;
                drawScene(my_scene, board_display, hitmiss_display) %Display a miss marker on the right side
            else
                fprintf('Computer hit!\n') %Tell the player the computer hit
                CPU_points = CPU_points+1; %Add a point to the computer's win condition
                hitmiss_display(compRow,compCol) = hit_sprite;
                drawScene(my_scene, board_display, hitmiss_display) %Display a hit marker on the right side
                hit = true;
                %below for algorithm
            end
        guessedPlaces(compRow,compCol) = true;

    end
    if my_points >= 17 %If the user hits every section of the computer's ships
        fprintf('You win!!!! Congrats!') %Display a win message
        break; %End the game
    elseif CPU_points >= 17 %If the computer hits every section of the user's ships
        fprintf('You lose. Womp womp. Try again?') %Display a lose message
        break; %End the game
    end
end
